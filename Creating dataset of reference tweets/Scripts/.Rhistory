# Merge 2 df's
combined_df <- dplyr::bind_rows(replies, original)
# Filter combined_df to keep only the rows where the referenced_tweets_id is present in the id column (pairs):
# Extract unique IDs from combined_df
combined_ids <- combined_df$id
# Filter combined_df to keep only rows where referenced_tweets_id is in combined_ids
filtered_combined_df <- combined_df %>%
filter(referenced_tweets_id %in% combined_ids | is.na(referenced_tweets_id))
# Count Na's
sum(is.na(filtered_combined_df$referenced_tweets_id))
sum(!is.na(filtered_combined_df$referenced_tweets_id))
sum(is.na(filtered_combined_df$id))
# Make a column with a pair number for each pair of tweet/reply
# Initialize pair_number with NA
filtered_combined_df$pair_number <- NA
# Initialize pair counter
pair_counter <- 1
# Loop through the dataframe to assign pair numbers
for (i in 1:nrow(filtered_combined_df)) {
if (!is.na(filtered_combined_df$referenced_tweets_id[i])) {
# Find the tweet this reply is referring to
tweet_id <- filtered_combined_df$referenced_tweets_id[i]
tweet_index <- which(filtered_combined_df$id == tweet_id)
if (length(tweet_index) > 0) {
# If a matching tweet is found, assign the same pair number to both
filtered_combined_df$pair_number[i] <- pair_counter
filtered_combined_df$pair_number[tweet_index] <- pair_counter
pair_counter <- pair_counter + 1
} else {
# If no matching tweet is found, assign 'no_match'
filtered_combined_df$pair_number[i] <- 'no_match'
}
}
}
# Assign 'no_match' to remaining NAs in pair_number
filtered_combined_df$pair_number[is.na(filtered_combined_df$pair_number)] <- 'no_match'
# Get number of 'no_match' (and NA)
sum(filtered_combined_df$pair_number == 'no_match')
sum(is.na(filtered_combined_df$pair_number))
# Remove rows with 'no_match'
filtered_combined_df <- filtered_combined_df %>%
filter(!filtered_combined_df$pair_number == 'no_match')
# Make pair_number numeric
filtered_combined_df <- filtered_combined_df%>%
mutate(pair_number= as.numeric(pair_number))
#Get unique values for a column
length(unique(filtered_combined_df$pair_number))
11696*2
# Data should be 23392 rows (since 1 unique number should consist of only 2 rows), but the df is 24147 rows
# This suggest some pair numbers might appear more than once
# Group by 'pair_number' and count the occurrences
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number' appears 5 times: ", five_time_count, "\n")
(121*1) + (10703*2) + (868*3) + (4*4)
# Makes 24147 (which is exactly the number of rows in filtered_combined_df)
# To make sure df only contains 2 row-pairs, every instance where a pair number appears only 1 time, 3 times or 4 times will be deleted
# Group by 'pair_number' and count the occurrences
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Filter the original dataframe to keep only 'pair_number' that appear exactly 2 times
filtered_combined_df <- filtered_combined_df %>%
semi_join(pair_count %>% filter(count == 2), by = "pair_number")
# Check it has worked
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number' appears 5 times: ", five_time_count, "\n")
# Numerate pair once more since some pairs have been removed
# Initialize pair_number_new with NA
filtered_combined_df$pair_number_new <- NA
# Initialize pair counter
pair_counter <- 1
# Loop through the dataframe to assign pair numbers
for (i in 1:nrow(filtered_combined_df)) {
if (!is.na(filtered_combined_df$referenced_tweets_id[i])) {
# Find the tweet this reply is referring to
tweet_id <- filtered_combined_df$referenced_tweets_id[i]
tweet_index <- which(filtered_combined_df$id == tweet_id)
if (length(tweet_index) > 0) {
# If a matching tweet is found, assign the same pair number to both
filtered_combined_df$pair_number_new[i] <- pair_counter
filtered_combined_df$pair_number_new[tweet_index] <- pair_counter
pair_counter <- pair_counter + 1
} else {
# If no matching tweet is found, assign 'no_match'
filtered_combined_df$pair_number_new[i] <- 'no_match'
}
}
}
# Assign 'no_match' to remaining NAs in pair_number_new
filtered_combined_df$pair_number_new[is.na(filtered_combined_df$pair_number_new)] <- 'no_match'
# Get number of 'no_match' (and NA)
sum(filtered_combined_df$pair_number_new == 'no_match')
sum(is.na(filtered_combined_df$pair_number_new))
# Remove rows with 'no_match'
filtered_combined_df <- filtered_combined_df %>%
filter(!filtered_combined_df$pair_number_new == 'no_match')
# Make pair_number_new numeric
filtered_combined_df <- filtered_combined_df%>%
mutate(pair_number_new= as.numeric(pair_number_new))
#check again
# Group by 'pair_number' and count the occurrences
#pair_count <- filtered_combined_df %>%
#group_by(pair_number) %>%
#summarise(count = n())
# Filter the original dataframe to keep only 'pair_number' that appear exactly 2 times
#filtered_combined_df <- filtered_combined_df %>%
#semi_join(pair_count %>% filter(count == 2), by = "pair_number_new")
# Check it has worked
pair_count <- filtered_combined_df %>%
group_by(pair_number_new) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number_new' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number_new' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number_new' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number_new' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number_new' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number_new' appears 5 times: ", five_time_count, "\n")
# Count Na's
colSums(is.na(filtered_combined_df))
# Make a tweet/reply column
filtered_combined_df<- filtered_combined_df %>%
mutate(type = ifelse(is.na(referenced_tweets_type), 'tweet', 'reply'))
# Rename some columns
filtered_combined_df<- filtered_combined_df %>%
rename(tweeter_name = user_name)%>%
rename(tweeter_username= user_username)%>%
rename(replied_to_reply_count = public_metrics.reply_count)
# Merge the count columns for like, retweet and quote
filtered_combined_df <- filtered_combined_df %>%
mutate(
like_n = coalesce(public_metrics.like_count, like_count),
retweet_n = coalesce(public_metrics.retweet_count, retweet_count),
quote_n = coalesce(public_metrics.quote_count, quote_count))
# Clean the created_at column
filtered_combined_df <- filtered_combined_df %>%
mutate(created_at = gsub("T", " ", created_at), # Replace T with withspace
created_at = gsub(".000Z", "", created_at)) # Remove every instance of .000Z
# Delete unnecessary columns
filtered_combined_df_reduced <- filtered_combined_df%>%
select(-c(`__index_level_0__`, sourcetweet_author_id, sourcetweet_text,sourcetweet_type, user_followers_count, user_tweet_count, user_pinned_tweet_id, user_verified, user_protected, user_location, sourcetweet_lang, sourcetweet_id, user_url, user_profile_image_url, possibly_sensitive, user_description, user_following_count, user_created_at, user_list_count, public_metrics.like_count, public_metrics.retweet_count, public_metrics.quote_count, like_count, retweet_count, quote_count, cleaned_text, preprocessed_text, referenced_tweets_type))
#Check for Na's
colSums(is.na(filtered_combined_df_reduced))
# Limit to 10.000 pairs
# Order the dataframe by pair_number_new and referenced_tweets_id
ordered_df <- filtered_combined_df_reduced %>%
arrange(pair_number_new, referenced_tweets_id)
# Filter to only include the first 5000 pairs
first_10000_pairs <- ordered_df %>%
filter(pair_number_new <= 10000)
# Save the df as csv
write.csv(first_10000_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/10k_twitter_pairs.csv", row.names=FALSE)
# Make a 200 pair csv ready for hand-coding
# Filter to only include the first 5000 pairs
first_200_pairs <- ordered_df %>%
filter(pair_number_new <= 200)
# Save
write.csv(first_200_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/10k_twitter_pairs.csv", row.names=FALSE)
# Save
write.csv(first_10000_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/10k_twitter_pairs.csv", row.names=FALSE)
# Save
write.csv(first_200_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/200_twitter_pairs.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load needed packages
pacman::p_load(tidyverse, academictwitteR, dplyr)
?academictwitteR::hydrate_tweets()
?academictwitteR::set_bearer()
?academictwitteR::bind_tweets()
# Specify the columns to be read in as character
col_types <- cols(
conversation_id = col_character(),
author_id = col_character(),
referenced_tweets_id = col_character(),
in_reply_to_user_id = col_character(),
id = col_character(),
.default = col_guess() # Guess the type for other columns
)
# Read the CSV with specified column types
replies <- read_csv('/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/replies_sample.csv', col_types = col_types)
# Finding and counting duplicate rows
duplicate_rows <- replies %>% filter(duplicated(replies))
nrow(duplicate_rows)
# Delete duplicate rows
replies <- replies %>% distinct()
# Check how many Na's in each column
colSums(is.na(replies))
# Prepare the id column
tweet_ids <- as.character(unlist(replies$referenced_tweets_id))
# Bind the tweets into a dataframe so we are able to work with it
original <- academictwitteR::bind_tweets("data/hydrate_trial", output_format = "tidy")
#Get unique values for a column
length(unique(original$text))
# Finding and counting duplicate rows (of original df)
duplicate_rows <- original %>% filter(duplicated(original))
nrow(duplicate_rows)
# Delete duplicate rows
original <- original %>% distinct()
# Finding and counting duplicate rows (of replies df)
duplicate_rows <- replies %>% filter(duplicated(replies))
nrow(duplicate_rows)
# Delete duplicate rows
replies <- replies %>% distinct()
#Prepare for merging
# Rename tweet_id in original to 'id'
original <- original %>%
rename(id = tweet_id)
# Make created_at column a character in replies
replies <- replies%>%
mutate(created_at = as.character(created_at))
# Merge 2 df's
combined_df <- dplyr::bind_rows(replies, original)
# Filter combined_df to keep only the rows where the referenced_tweets_id is present in the id column (pairs):
# Extract unique IDs from combined_df
combined_ids <- combined_df$id
# Filter combined_df to keep only rows where referenced_tweets_id is in combined_ids
filtered_combined_df <- combined_df %>%
filter(referenced_tweets_id %in% combined_ids | is.na(referenced_tweets_id))
# Count Na's
sum(is.na(filtered_combined_df$referenced_tweets_id))
sum(!is.na(filtered_combined_df$referenced_tweets_id))
sum(is.na(filtered_combined_df$id))
# Make a column with a pair number for each pair of tweet/reply
# Initialize pair_number with NA
filtered_combined_df$pair_number <- NA
# Initialize pair counter
pair_counter <- 1
# Loop through the dataframe to assign pair numbers
for (i in 1:nrow(filtered_combined_df)) {
if (!is.na(filtered_combined_df$referenced_tweets_id[i])) {
# Find the tweet this reply is referring to
tweet_id <- filtered_combined_df$referenced_tweets_id[i]
tweet_index <- which(filtered_combined_df$id == tweet_id)
if (length(tweet_index) > 0) {
# If a matching tweet is found, assign the same pair number to both
filtered_combined_df$pair_number[i] <- pair_counter
filtered_combined_df$pair_number[tweet_index] <- pair_counter
pair_counter <- pair_counter + 1
} else {
# If no matching tweet is found, assign 'no_match'
filtered_combined_df$pair_number[i] <- 'no_match'
}
}
}
# Assign 'no_match' to remaining NAs in pair_number
filtered_combined_df$pair_number[is.na(filtered_combined_df$pair_number)] <- 'no_match'
# Get number of 'no_match' (and NA)
sum(filtered_combined_df$pair_number == 'no_match')
sum(is.na(filtered_combined_df$pair_number))
# Remove rows with 'no_match'
filtered_combined_df <- filtered_combined_df %>%
filter(!filtered_combined_df$pair_number == 'no_match')
# Make pair_number numeric
filtered_combined_df <- filtered_combined_df%>%
mutate(pair_number= as.numeric(pair_number))
#Get unique values for a column
length(unique(filtered_combined_df$pair_number))
11696*2
# Data should be 23392 rows (since 1 unique number should consist of only 2 rows), but the df is 24147 rows
# This suggest some pair numbers might appear more than once
#Check if some pair_number appear more than once
# Group by 'pair_number' and count the occurrences
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number' appears 5 times: ", five_time_count, "\n")
(121*1) + (10703*2) + (868*3) + (4*4)
# Makes 24147 (which is exactly the number of rows in filtered_combined_df)
# To make sure df only contains 2 row-pairs, every instance where a pair number appears only 1 time, 3 times or 4 times will be delete
# Group by 'pair_number' and count the occurrences
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Filter the original dataframe to keep only 'pair_number' that appear exactly 2 times
filtered_combined_df <- filtered_combined_df %>%
semi_join(pair_count %>% filter(count == 2), by = "pair_number")
# Check it has worked
pair_count <- filtered_combined_df %>%
group_by(pair_number) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number' appears 5 times: ", five_time_count, "\n")
# Numerate pair once more since some pairs have been removed
# Initialize pair_number_new with NA
filtered_combined_df$pair_number_new <- NA
# Initialize pair counter
pair_counter <- 1
# Loop through the dataframe to assign pair numbers
for (i in 1:nrow(filtered_combined_df)) {
if (!is.na(filtered_combined_df$referenced_tweets_id[i])) {
# Find the tweet this reply is referring to
tweet_id <- filtered_combined_df$referenced_tweets_id[i]
tweet_index <- which(filtered_combined_df$id == tweet_id)
if (length(tweet_index) > 0) {
# If a matching tweet is found, assign the same pair number to both
filtered_combined_df$pair_number_new[i] <- pair_counter
filtered_combined_df$pair_number_new[tweet_index] <- pair_counter
pair_counter <- pair_counter + 1
} else {
# If no matching tweet is found, assign 'no_match'
filtered_combined_df$pair_number_new[i] <- 'no_match'
}
}
}
# Assign 'no_match' to remaining NAs in pair_number_new
filtered_combined_df$pair_number_new[is.na(filtered_combined_df$pair_number_new)] <- 'no_match'
# Get number of 'no_match' (and NA)
sum(filtered_combined_df$pair_number_new == 'no_match')
sum(is.na(filtered_combined_df$pair_number_new))
# Remove rows with 'no_match'
filtered_combined_df <- filtered_combined_df %>%
filter(!filtered_combined_df$pair_number_new == 'no_match')
# Make pair_number_new numeric
filtered_combined_df <- filtered_combined_df%>%
mutate(pair_number_new= as.numeric(pair_number_new))
# Check again with the new pair numbers
pair_count <- filtered_combined_df %>%
group_by(pair_number_new) %>%
summarise(count = n())
# Check how many instances there are where a number in 'pair_number_new' appears just 1 time
one_time_count <- pair_count %>%
filter(count == 1) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 2 times
two_time_count <- pair_count %>%
filter(count == 2) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 3 times
three_time_count <- pair_count %>%
filter(count == 3) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 4 times
four_time_count <- pair_count %>%
filter(count == 4) %>%
nrow()
# Check how many instances there are where a number in 'pair_number_new' appears 5 times
five_time_count <- pair_count %>%
filter(count == 5) %>%
nrow()
# Print the results
cat("Instances where 'pair_number_new' appears just 1 time: ", one_time_count, "\n")
cat("Instances where 'pair_number_new' appears 2 times: ", two_time_count, "\n")
cat("Instances where 'pair_number_new' appears 3 times: ", three_time_count, "\n")
cat("Instances where 'pair_number_new' appears 4 times: ", four_time_count, "\n")
cat("Instances where 'pair_number_new' appears 5 times: ", five_time_count, "\n")
# Count Na's
colSums(is.na(filtered_combined_df))
# Make a tweet/reply column
filtered_combined_df<- filtered_combined_df %>%
mutate(type = ifelse(is.na(referenced_tweets_type), 'tweet', 'reply'))
# Rename some columns
filtered_combined_df<- filtered_combined_df %>%
rename(tweeter_name = user_name)%>%
rename(tweeter_username= user_username)%>%
rename(replied_to_reply_count = public_metrics.reply_count) %>%
rename(pair_num = pair_number_new)
View(filtered_combined_df)
# Merge the count columns for like, retweet and quote
filtered_combined_df <- filtered_combined_df %>%
mutate(
like_n = coalesce(public_metrics.like_count, like_count),
retweet_n = coalesce(public_metrics.retweet_count, retweet_count),
quote_n = coalesce(public_metrics.quote_count, quote_count))
# Clean the created_at column
filtered_combined_df <- filtered_combined_df %>%
mutate(created_at = gsub("T", " ", created_at), # Replace T with withspace
created_at = gsub(".000Z", "", created_at)) # Remove every instance of .000Z
# Delete unnecessary columns
filtered_combined_df_reduced <- filtered_combined_df%>%
select(-c(`__index_level_0__`, sourcetweet_author_id, sourcetweet_text,sourcetweet_type, user_followers_count, user_tweet_count, user_pinned_tweet_id, user_verified, user_protected, user_location, sourcetweet_lang, sourcetweet_id, user_url, user_profile_image_url, possibly_sensitive, user_description, user_following_count, user_created_at, user_list_count, public_metrics.like_count, public_metrics.retweet_count, public_metrics.quote_count, like_count, retweet_count, quote_count, cleaned_text, preprocessed_text, referenced_tweets_type, pair_number))
#Check for Na's
colSums(is.na(filtered_combined_df_reduced))
# Limit to 10.000 pairs
# Order the dataframe by pair_number_new and referenced_tweets_id
ordered_df <- filtered_combined_df_reduced %>%
arrange(pair_number_new, referenced_tweets_id)
# Limit to 10.000 pairs
# Order the dataframe by pair_num and referenced_tweets_id
ordered_df <- filtered_combined_df_reduced %>%
arrange(pair_num, referenced_tweets_id)
# Filter to only include the first 10000 pairs
first_10000_pairs <- ordered_df %>%
filter(pair_num <= 10000)
# Save
write.csv(first_10000_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/10k_twitter_pairs.csv", row.names=FALSE)
# Make a 200 pair CSV ready for hand-coding
# Filter to only include the first 200 pairs
first_200_pairs <- ordered_df %>%
filter(pair_num <= 200)
# Save
write.csv(first_200_pairs, "/Users/idahelenedencker/Desktop/STANDBY_Ida/Creating dataset of reference tweets/200_twitter_pairs.csv", row.names=FALSE)
